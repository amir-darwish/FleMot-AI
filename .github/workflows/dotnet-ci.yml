name: .NET Backend CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      

      - name: Publish project
        run: dotnet publish ./backend --configuration Release --output ./publish

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: ./publish

  test:
    runs-on: ubuntu-latest
    needs: build
    services:
      mongo:
        image: mongo:8.0
        ports:
          - 27017:27017

    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: published-app
          path: ./app

      - name: Run integration tests
        run: dotnet test ./app/FleMot.Api.Tests.dll --logger "trx;logfilename=test-results.trx"
        env:
          MongoDbSettings__ConnectionString: "mongodb://localhost:27017"
          MongoDbSettings__DatabaseName: "TestDb"
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
  deploy:
    runs-on: self-hosted 
    needs: test
      
      
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create production environment file
        run: |
          echo "MONGO_USER=${{ secrets.MONGO_USER }}" > .env.prod
          echo "MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}" >> .env.prod
          echo "MONGO_CONNECTION_STRING=${{ secrets.MONGO_CONNECTION_STRING_PROD }}" >> .env.prod
          echo "MONGO_DATABASE_NAME=FleMotDB_Prod" >> .env.prod
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env.prod

      - name: Deploy to Server
        run: |
          echo "Stopping old containers..."
          docker compose -f docker-compose.yml -f docker-compose.prod.yml down

          echo "Building and starting new containers in production mode..."
          docker compose --env-file .env.prod -f docker-compose.yml -f docker-compose.prod.yml up -d --build